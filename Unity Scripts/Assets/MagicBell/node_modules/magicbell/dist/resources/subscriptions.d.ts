import { type FromSchema } from 'json-schema-to-ts';
import { type IterablePromise } from '../method';
import { Resource } from '../resource';
import * as schemas from '../schemas/subscriptions';
import { type RequestOptions } from '../types';
declare type ListSubscriptionsResponse = FromSchema<typeof schemas.ListSubscriptionsResponseSchema>;
declare type CreateSubscriptionsResponse = FromSchema<typeof schemas.CreateSubscriptionsResponseSchema>;
declare type CreateSubscriptionsPayload = FromSchema<typeof schemas.CreateSubscriptionsPayloadSchema>;
declare type UnsubscribeSubscriptionsResponse = FromSchema<typeof schemas.UnsubscribeSubscriptionsResponseSchema>;
declare type UnsubscribeSubscriptionsPayload = FromSchema<typeof schemas.UnsubscribeSubscriptionsPayloadSchema>;
declare type GetSubscriptionsResponse = FromSchema<typeof schemas.GetSubscriptionsResponseSchema>;
declare type DeleteSubscriptionsPayload = FromSchema<typeof schemas.DeleteSubscriptionsPayloadSchema>;
export declare class Subscriptions extends Resource {
    path: string;
    entity: string;
    /**
     * List a user's subscriptions status for all topics and categories.
     *
     * @param options - override client request options.
     * @returns
     **/
    list(options?: RequestOptions): IterablePromise<ListSubscriptionsResponse>;
    /**
     * Set a user's subscription status to subscribed for a particular topic (and
     * optional categories). If the user previously unsubscribed, the user will be
     * resubscribed.
     *
     * @param data
     * @param options - override client request options.
     * @returns
     **/
    create(data: CreateSubscriptionsPayload, options?: RequestOptions): Promise<CreateSubscriptionsResponse>;
    /**
     * Unusbscribe a user from a particular topic (and optional categories).
     *
     * @param topic - The topic for which we'd like to filter topic subscriptions.
     * @param data
     * @param options - override client request options.
     * @returns
     **/
    unsubscribe(topic: string, data: UnsubscribeSubscriptionsPayload, options?: RequestOptions): Promise<UnsubscribeSubscriptionsResponse>;
    /**
     * Show a user's subscription status for a particular topic and categories.
     *
     * @param topic - The topic for which we'd like to filter topic subscriptions.
     * @param options - override client request options.
     * @returns
     **/
    get(topic: string, options?: RequestOptions): Promise<GetSubscriptionsResponse>;
    /**
     * Delete topic subscription(s)
     *
     * @param topic - The topic for which we'd like to filter topic subscriptions.
     * @param options - override client request options.
     **/
    delete(topic: string, options?: RequestOptions): Promise<void>;
    /**
     * Delete topic subscription(s)
     *
     * @param topic - The topic for which we'd like to filter topic subscriptions.
     * @param data
     * @param options - override client request options.
     **/
    delete(topic: string, data: DeleteSubscriptionsPayload, options?: RequestOptions): Promise<void>;
}
export {};
