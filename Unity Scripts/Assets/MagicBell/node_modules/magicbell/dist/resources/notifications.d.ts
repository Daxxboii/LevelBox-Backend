import { type FromSchema } from 'json-schema-to-ts';
import { type IterablePromise } from '../method';
import { Resource } from '../resource';
import * as schemas from '../schemas/notifications';
import { type RequestOptions } from '../types';
declare type CreateNotificationsResponse = FromSchema<typeof schemas.CreateNotificationsResponseSchema>;
declare type CreateNotificationsPayload = FromSchema<typeof schemas.CreateNotificationsPayloadSchema>;
declare type ListNotificationsResponse = FromSchema<typeof schemas.ListNotificationsResponseSchema>;
declare type ListNotificationsPayload = FromSchema<typeof schemas.ListNotificationsPayloadSchema>;
declare type GetNotificationsResponse = FromSchema<typeof schemas.GetNotificationsResponseSchema>;
declare type MarkAllReadNotificationsPayload = FromSchema<typeof schemas.MarkAllReadNotificationsPayloadSchema>;
declare type MarkAllSeenNotificationsPayload = FromSchema<typeof schemas.MarkAllSeenNotificationsPayloadSchema>;
export declare class Notifications extends Resource {
    path: string;
    entity: string;
    /**
     * Send a notification to one or multiple users. You can identify users by their
     * email address or by an external_id.
     *
     * You don't have to import your users into MagicBell. If a user does not exist
     * we'll create it automatically.
     *
     * You can send user attributes like first_name, custom_attributes, and more when
     * creating a notification.
     *
     * The new notification will be shown in the notification inbox of each recipient
     * in real-time. It will also be delivered to each recipient through all channels
     * you have enabled for your MagicBell project.
     *
     * @param data
     * @param options - override client request options.
     * @returns
     **/
    create(data: CreateNotificationsPayload, options?: RequestOptions): Promise<CreateNotificationsResponse>;
    /**
     * Fetch a user's notifications. Notifications are sorted in descendent order by
     * the sent_at timestamp.
     *
     * @param options - override client request options.
     * @returns
     **/
    list(options?: RequestOptions): IterablePromise<ListNotificationsResponse>;
    /**
     * Fetch a user's notifications. Notifications are sorted in descendent order by
     * the sent_at timestamp.
     *
     * @param data
     * @param options - override client request options.
     * @returns
     **/
    list(data: ListNotificationsPayload, options?: RequestOptions): IterablePromise<ListNotificationsResponse>;
    /**
     * Fetch a user's notification by its ID.
     *
     * @param notificationId - ID of the user notification.
     *   The ID of a user notification can be obtained from the "Fetch user
     *   notifications" API endpoint or from push events sent to the MagicBell React
     *   library.
     *
     * @param options - override client request options.
     * @returns
     **/
    get(notificationId: string, options?: RequestOptions): Promise<GetNotificationsResponse>;
    /**
     * Delete a user's notification by its ID. The notification is deleted immediately
     * and removed from the user's notification inbox in real-time.
     *
     * @param notificationId - ID of the user notification.
     *   The ID of a user notification can be obtained from the "Fetch user
     *   notifications" API endpoint or from push events sent to the MagicBell React
     *   library.
     *
     * @param options - override client request options.
     **/
    delete(notificationId: string, options?: RequestOptions): Promise<void>;
    /**
     * Mark a user notification as read. The notification will be automatically marked
     * as seen, too.
     *
     * The new state will be reflected in the user's notification inbox in real-time.
     *
     * @param notificationId - ID of the user notification.
     *   The ID of a user notification can be obtained from the "Fetch user
     *   notifications" API endpoint or from push events sent to the MagicBell React
     *   library.
     *
     * @param options - override client request options.
     **/
    markAsRead(notificationId: string, options?: RequestOptions): Promise<void>;
    /**
     * Mark a user notification as unread. The new state will be reflected in the
     * user's notification inbox in real-time.
     *
     * @param notificationId - ID of the user notification.
     *   The ID of a user notification can be obtained from the "Fetch user
     *   notifications" API endpoint or from push events sent to the MagicBell React
     *   library.
     *
     * @param options - override client request options.
     **/
    markAsUnread(notificationId: string, options?: RequestOptions): Promise<void>;
    /**
     * Mark a user notification as archived.
     *
     * @param notificationId - ID of the user notification.
     *   The ID of a user notification can be obtained from the "Fetch user
     *   notifications" API endpoint or from push events sent to the MagicBell React
     *   library.
     *
     * @param options - override client request options.
     **/
    archive(notificationId: string, options?: RequestOptions): Promise<void>;
    /**
     * Mark a user notification as unarchived.
     *
     * @param notificationId - ID of the user notification.
     *   The ID of a user notification can be obtained from the "Fetch user
     *   notifications" API endpoint or from push events sent to the MagicBell React
     *   library.
     *
     * @param options - override client request options.
     **/
    unarchive(notificationId: string, options?: RequestOptions): Promise<void>;
    /**
     * Mark all notifications of a user as read. When you call this endpoint, the
     * notification inboxes of this user will be updated in real-time.
     *
     * @param options - override client request options.
     **/
    markAllRead(options?: RequestOptions): Promise<void>;
    /**
     * Mark all notifications of a user as read. When you call this endpoint, the
     * notification inboxes of this user will be updated in real-time.
     *
     * @param data
     * @param options - override client request options.
     **/
    markAllRead(data: MarkAllReadNotificationsPayload, options?: RequestOptions): Promise<void>;
    /**
     * Mark all notifications of a user as seen. When you call this endpoint, the
     * notification inboxes of this user will be updated in real-time.
     *
     * @param options - override client request options.
     **/
    markAllSeen(options?: RequestOptions): Promise<void>;
    /**
     * Mark all notifications of a user as seen. When you call this endpoint, the
     * notification inboxes of this user will be updated in real-time.
     *
     * @param data
     * @param options - override client request options.
     **/
    markAllSeen(data: MarkAllSeenNotificationsPayload, options?: RequestOptions): Promise<void>;
}
export {};
