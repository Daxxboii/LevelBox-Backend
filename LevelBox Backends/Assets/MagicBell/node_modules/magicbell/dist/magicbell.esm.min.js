/** 
 * @license magicbell v1.1.0
 *
 * Copyright (c) MagicBell Inc. and its affiliates.
 *
 * This source code is licensed under the license found in the
 * LICENSE file in the root directory of this source tree.
 */

var fe = Object.defineProperty, me = Object.defineProperties;
var pe = Object.getOwnPropertyDescriptors;
var V = Object.getOwnPropertySymbols;
var ge = Object.prototype.hasOwnProperty, ye = Object.prototype.propertyIsEnumerable;
var F = (e, t, r) => t in e ? fe(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, b = (e, t) => {
  for (var r in t || (t = {}))
    ge.call(t, r) && F(e, r, t[r]);
  if (V)
    for (var r of V(t))
      ye.call(t, r) && F(e, r, t[r]);
  return e;
}, k = (e, t) => me(e, pe(t));
var i = (e, t, r) => (F(e, typeof t != "symbol" ? t + "" : t, r), r), D = (e, t, r) => {
  if (!t.has(e))
    throw TypeError("Cannot " + r);
};
var T = (e, t, r) => (D(e, t, "read from private field"), r ? r.call(e) : t.get(e)), x = (e, t, r) => {
  if (t.has(e))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(e) : t.set(e, r);
}, O = (e, t, r, n) => (D(e, t, "write to private field"), n ? n.call(e, r) : t.set(e, r), r);
var S = (e, t, r) => (D(e, t, "access private method"), r);
import W from "axios";
import X from "crypto";
import Ee from "eventsource";
function xe(e, t) {
  if (!e || !t)
    return "";
  if (!X || !X.createHmac)
    throw new Error("This method is not available in the browser. Please provide a userHmac.");
  return X.createHmac("sha256", e).update(t).digest("base64");
}
function ne() {
  var t;
  const e = {
    binding: "magicbell",
    binding_version: "1.1.0",
    publisher: "magicbell"
  };
  return typeof process > "u" ? e : k(b({}, e), {
    runtime: ((t = process == null ? void 0 : process.release) == null ? void 0 : t.name) || "node",
    runtime_version: process.version,
    platform: process.platform,
    arch: process.arch
  });
}
function Te(e) {
  return e != null && e.name ? [e == null ? void 0 : e.name, e.version && `/${e.version}`, e.url && ` (${e.url})`].filter(Boolean).join("") : "";
}
function be(e) {
  const t = ne();
  return [
    `${t.binding}/${t.binding_version}`,
    "runtime" in t && `${t.runtime}/${t.runtime_version}`,
    Te(e)
  ].filter(Boolean).join(" ");
}
function Pe(e) {
  return JSON.stringify(k(b({}, ne()), { application: e }));
}
function Ae(e) {
  for (const t of ["code", "type", "status"])
    switch (e[t]) {
      case "user_identifier_not_provided":
        return new ee(e);
      case "invalid_request_error":
        return new Se(e);
      case "api_error":
        return new we(e);
      case "authentication_error":
        return new ee(e);
      case "rate_limit_error":
        return new qe(e);
      case "idempotency_error":
        return new _e(e);
      case 404:
        return new $e(e);
      case 422:
        return new ve(e);
    }
  return new Oe(e);
}
class A extends Error {
  constructor(r) {
    super(r.message);
    i(this, "name");
    i(this, "message");
    i(this, "type");
    i(this, "docs_url");
    i(this, "code");
    i(this, "status");
    i(this, "statusText");
    i(this, "suggestion");
    this.type = this.constructor.name, this.name = "MagicBellError", this.code = r.code, this.status = r.status, this.statusText = r.statusText, this.message = r.message, this.suggestion = r.suggestion, this.docs_url = r.docs_url || r.help_link;
  }
}
class Se extends A {
}
class ve extends A {
}
class we extends A {
}
class ee extends A {
}
class qe extends A {
}
class _e extends A {
}
class Oe extends A {
}
class $e extends A {
}
function K(e) {
  if (!e || typeof e != "object")
    return e;
  const t = {};
  for (const r of Object.keys(e))
    t[Le(r)] = e[r];
  return t;
}
function Le(e) {
  const t = {
    etag: "ETag",
    magicbell: "MagicBell"
  };
  return e.split("-").map((r) => t[r.toLowerCase()] || r.charAt(0).toUpperCase() + r.slice(1).toLowerCase()).join("-");
}
const w = {
  reset: "\x1B[0m",
  magenta: "\x1B[35m",
  red: "\x1B[31m"
};
class Ie {
  constructor() {
    i(this, "active", !1);
  }
  debug(t) {
    !this.active || console.log(`${w.reset}${w.magenta}magicbell:${w.reset} ${t}`);
  }
  error(t) {
    !this.active || console.error(`${w.reset}${w.red}magicbell:${w.reset} ${t}`);
  }
}
function Me(e) {
  return `${e.slice(0, 4)}\u2026${e.slice(-4)}`;
}
const Ue = /secret|token|key|password/i;
function Be(e) {
  return Ue.test(e);
}
function ke({ method: e, baseURL: t, url: r, data: n, headers: s }) {
  return [
    `curl -X ${e.toUpperCase()}`,
    `${t}/${r.replace(/^\//, "")}`,
    Object.entries(s).map(([u, o]) => `-H '${u}: ${Be(u) ? Me(String(o)) : o}'`).join(" "),
    n && `-d '${JSON.stringify(n)}'`
  ].join(" ");
}
const Q = (e, t) => Object.prototype.hasOwnProperty.call(e, t);
function P(e) {
  return typeof e == "string";
}
function $(e) {
  return typeof e == "boolean";
}
function se(e) {
  return Array.isArray(e);
}
function te(e) {
  return Array.isArray(e) && e.every((t) => typeof t == "string");
}
function J(e) {
  return typeof e == "number";
}
function L(e) {
  return e && typeof e == "object";
}
function Ne(e, t = !1) {
  if (typeof e != "object")
    throw new Error("Argument must be an object");
  const r = {};
  for (const n of Object.keys(e))
    e[n] != null && (t && e[n] === "" || (r[n] = e[n]));
  return r;
}
function Re() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (e) => {
    const t = Math.random() * 16 | 0;
    return (e === "x" ? t : t & 3 | 8).toString(16);
  });
}
async function je(e) {
  return new Promise((t) => setTimeout(t, e));
}
function He(...e) {
  if (e.length <= 2)
    return e.join(" and ");
  const t = e.slice(-1)[0];
  return [e.slice(0, -1).join(", "), t].join(", and ");
}
function Ge(...e) {
  return ["/", ...e].join("/").replace(/\/+/g, "/").replace(/\/$/, "");
}
const ie = typeof Symbol < "u" && Symbol.asyncIterator ? Symbol.asyncIterator : "@@asyncIterator";
function Ce(e) {
  return Q(e, "current_page") && Q(e, "total_pages") && e.current_page < e.total_pages;
}
function Fe(e, { data: t, params: r }) {
  const n = { currentPromise: null }, s = typeof r.after < "u";
  let u = 0, o = e({ data: t, params: r });
  const h = (c) => {
    const y = c.current_page + 1;
    return e({ data: t, params: k(b({}, r), { page: y }) });
  };
  function g(c) {
    const y = Object.keys(c).find((d) => Array.isArray(c[d])), l = c[y] || c.data;
    if (!l || typeof l.length != "number")
      throw Error("Unexpected: MagicBell API response does not have a well-formed response.");
    if (u < l.length) {
      const d = s ? l.length - 1 - u : u, E = l[d];
      return u += 1, { value: E, done: !1 };
    }
    return Ce(c) ? (u = 0, o = h(c), o.then(g)) : { value: void 0, done: !0 };
  }
  function m() {
    return De(n, (c, y) => o.then(g).then(c).catch(y));
  }
  const p = oe(m), f = Xe(p), a = {
    forEach: p,
    toArray: f,
    next: m,
    return: () => ({}),
    [ie]: () => a
  };
  return Object.assign(o, a);
}
function De(e, t) {
  return e.currentPromise || (e.currentPromise = new Promise(t).then((r) => (e.currentPromise = void 0, r))), e.currentPromise;
}
function oe(e, t) {
  return function(n) {
    return new Promise((s, u) => {
      let o = 0;
      function h(g) {
        if (g.done) {
          s();
          return;
        }
        const m = g.value;
        return new Promise((p) => {
          p(n(m, o));
        }).then((p) => p === !1 ? (t == null || t(), h({ done: !0 })) : (o++, e().then(h)));
      }
      e().then(h).catch(u);
    });
  };
}
function Xe(e) {
  return function(r) {
    const n = r == null ? void 0 : r.limit;
    if (!n)
      throw Error("You must pass a `limit` option to toArray, e.g., `toArray({ limit: 1000 });`.");
    if (n > 1e4)
      throw Error(
        "You cannot specify a limit of more than 10,000 items to fetch in `toArray`; use `forEach` to iterate through longer lists."
      );
    return new Promise((s, u) => {
      const o = [];
      e((h) => {
        if (o.push(h), o.length >= n)
          return !1;
      }).then(() => {
        s(o);
      }).catch(u);
    });
  };
}
function Ke(e, t = {}) {
  let r, n, s, u;
  const o = [];
  let h;
  const g = (f) => {
    o.push(f), h && (h(), h = null);
  };
  async function m(f) {
    !n && !u && (u = e.request({ method: "GET", path: "/config" }, f).then((d) => n = d.ws.channel));
    const a = await e.request({ method: "POST", path: "/ws/auth" }, f), { token: c } = await W.post(`https://rest.ably.io/keys/${a.keyName}/requestToken`, a).then((d) => d.data);
    await u;
    const y = t.sseHost || "https://realtime.ably.io", l = new URL("sse", y);
    l.searchParams.append("v", "1.1"), l.searchParams.append("accessToken", c), l.searchParams.append("channels", n), l.searchParams.append("heartbeats", "true"), s && l.searchParams.append("lastEvent", s), r && r.close(), r = new Ee(l.toString()), r.onmessage = (d) => {
      if (d.origin !== y || (s = d.lastEventId, !("data" in d)))
        return;
      const E = JSON.parse(d.data);
      if (E.type === "close")
        return g({ value: null, done: !0 });
      E.data = E.encoding === "json" ? JSON.parse(E.data) : E.data, g({ value: E, done: !1 });
    }, r.onerror = (d) => {
      const E = "data" in d ? JSON.parse(d.data) : {};
      E.code >= 40140 && E.code < 40150 ? (r.close(), m(f)) : /invalid channel id/i.test(E.message) ? (r.close(), g({ value: null, done: !0 })) : console.log("err", d);
    };
  }
  function p(f) {
    m(f);
    const a = async () => {
      o.length || await new Promise((E) => h = E);
      const d = o.pop();
      return d.done && r && r.close(), d;
    }, c = () => (r.close(), { done: !0, value: void 0 }), l = {
      forEach: oe(a, c),
      next: a,
      return: c,
      [ie]: () => l
    };
    return l;
  }
  return p;
}
const Y = {
  host: P,
  maxRetryDelay: J,
  timeout: J,
  apiKey: P,
  maxRetries: J,
  userEmail: P,
  userExternalId: P,
  userHmac: P,
  idempotencyKey: P,
  telemetry: $,
  apiSecret: P,
  appInfo: L,
  debug: $,
  features: L
};
function Z(e) {
  var t;
  if (!L(e))
    return !1;
  for (const r of Object.keys(e))
    if (!((t = Y[r]) != null && t.call(Y, e[r])))
      return !1;
  return !0;
}
const z = {
  archived: $,
  read: $,
  seen: $,
  categories: (e) => P(e) || te(e),
  topics: (e) => P(e) || te(e)
};
function Je(e) {
  var t;
  if (!L(e))
    return !1;
  for (const r of Object.keys(e))
    if (!((t = z[r]) != null && t.call(z, e[r])))
      return !1;
  return !0;
}
function Ye(e, t, r = { encode: !0 }) {
  return e.replace(
    /{([\s\S]+?)}/g,
    (n, s) => r.encode ? encodeURIComponent(t[s] || "") : t[s] || ""
  );
}
function ze(e) {
  return (e.match(/{\w+}/g) || [] || []).map((r) => r.replace(/[{}]/g, ""));
}
function Qe(e) {
  return !se(e) || !L(e[0]) ? {} : Z(e[0]) ? {} : e.shift();
}
function We(e) {
  if (!se(e) || e.length === 0)
    return {};
  const t = e[e.length - 1];
  return Z(t) ? b({}, e.pop()) : {};
}
function Ze({
  path: e,
  method: t,
  args: r
}) {
  const n = [...r].filter((a) => a !== void 0), u = ze(e).reduce((a, c) => {
    const y = n.shift();
    if (typeof y != "string")
      throw new Error(
        `MagicBell: Argument "${c}" must be a string, but got ${typeof y}: ${JSON.stringify(
          y
        )} (on API request to \`${t} ${e}\`)`
      );
    return a[c] = y, a;
  }, {}), o = Ye(e, u, { encode: !1 }), h = Qe(n), g = We(n);
  if (n.filter((a) => a != null).length)
    throw new Error(
      `MagicBell: Unknown arguments (${JSON.stringify(n)}). (on API request to \`${t} ${o}\`)`
    );
  let m = t === "GET";
  return t === "POST" && Je(h) && (m = !0), { path: o, data: m ? {} : h, params: m ? h : {}, options: g };
}
function re(e) {
  return e ? Array.isArray(e) ? e.length === 0 : typeof e == "object" ? Object.keys(e).length === 0 : !1 : !0;
}
class _ {
  constructor(t) {
    i(this, "path");
    i(this, "entity");
    i(this, "client");
    this.client = t;
  }
  request({ method: t, paged: r, path: n }, ...s) {
    const { path: u, data: o, params: h, options: g } = Ze({
      path: Ge(this.path, n),
      method: t,
      args: s
    }), m = ({ data: p, params: f }) => {
      const a = this.entity || this.path;
      return p = re(p) ? void 0 : { [a]: p }, f = re(f) ? void 0 : f, this.client.request({ method: t, path: u, data: p, params: f }, g).then((c) => c[a] || c);
    };
    return r ? Fe(m, {
      data: o,
      params: h
    }) : m({ data: o, params: h });
  }
  assertFeatureFlag(t) {
    if (!this.client.hasFlag(t))
      throw new Error(`This is a beta feature, please enable it by providing the "${t}" feature flag.`);
  }
}
class Ve extends _ {
  constructor() {
    super(...arguments);
    i(this, "path", "imports");
    i(this, "entity", "import");
  }
  create(r, n) {
    return this.request(
      {
        method: "POST"
      },
      r,
      n
    );
  }
  get(r, n) {
    return this.request(
      {
        method: "GET",
        path: "{import_id}"
      },
      r,
      n
    );
  }
}
class et extends _ {
  constructor() {
    super(...arguments);
    i(this, "path", "notification_preferences");
    i(this, "entity", "notification_preferences");
  }
  get(r) {
    return this.request(
      {
        method: "GET"
      },
      r
    );
  }
  update(r, n) {
    return this.request(
      {
        method: "PUT"
      },
      r,
      n
    );
  }
}
class tt extends _ {
  constructor() {
    super(...arguments);
    i(this, "path", "notifications");
    i(this, "entity", "notification");
  }
  create(r, n) {
    return this.request(
      {
        method: "POST"
      },
      r,
      n
    );
  }
  list(r, n) {
    return this.request(
      {
        method: "GET",
        paged: !0
      },
      r,
      n
    );
  }
  get(r, n) {
    return this.request(
      {
        method: "GET",
        path: "{notification_id}"
      },
      r,
      n
    );
  }
  delete(r, n) {
    return this.request(
      {
        method: "DELETE",
        path: "{notification_id}"
      },
      r,
      n
    );
  }
  markAsRead(r, n) {
    return this.request(
      {
        method: "POST",
        path: "{notification_id}/read"
      },
      r,
      n
    );
  }
  markAsUnread(r, n) {
    return this.request(
      {
        method: "POST",
        path: "{notification_id}/unread"
      },
      r,
      n
    );
  }
  archive(r, n) {
    return this.request(
      {
        method: "POST",
        path: "{notification_id}/archive"
      },
      r,
      n
    );
  }
  unarchive(r, n) {
    return this.request(
      {
        method: "DELETE",
        path: "{notification_id}/archive"
      },
      r,
      n
    );
  }
  markAllRead(r, n) {
    return this.request(
      {
        method: "POST",
        path: "read"
      },
      r,
      n
    );
  }
  markAllSeen(r, n) {
    return this.request(
      {
        method: "POST",
        path: "seen"
      },
      r,
      n
    );
  }
}
class rt extends _ {
  constructor() {
    super(...arguments);
    i(this, "path", "push_subscriptions");
    i(this, "entity", "push_subscription");
  }
  create(r, n) {
    return this.assertFeatureFlag("push-subscriptions-create"), this.request(
      {
        method: "POST"
      },
      r,
      n
    );
  }
  delete(r, n) {
    return this.assertFeatureFlag("push-subscriptions-delete"), this.request(
      {
        method: "DELETE",
        path: "{device_token}"
      },
      r,
      n
    );
  }
}
class nt extends _ {
  constructor() {
    super(...arguments);
    i(this, "path", "subscriptions");
    i(this, "entity", "subscription");
  }
  list(r) {
    return this.request(
      {
        method: "GET",
        paged: !0
      },
      r
    );
  }
  create(r, n) {
    return this.request(
      {
        method: "POST"
      },
      r,
      n
    );
  }
  unsubscribe(r, n, s) {
    return this.request(
      {
        method: "POST",
        path: "{topic}/unsubscribe"
      },
      r,
      n,
      s
    );
  }
  get(r, n) {
    return this.request(
      {
        method: "GET",
        path: "{topic}"
      },
      r,
      n
    );
  }
  delete(r, n, s) {
    return this.request(
      {
        method: "DELETE",
        path: "{topic}"
      },
      r,
      n,
      s
    );
  }
}
class st extends _ {
  constructor() {
    super(...arguments);
    i(this, "path", "users");
    i(this, "entity", "user");
  }
  create(r, n) {
    return this.request(
      {
        method: "POST"
      },
      r,
      n
    );
  }
  update(r, n, s) {
    return this.request(
      {
        method: "PUT",
        path: "{user_id}"
      },
      r,
      n,
      s
    );
  }
  delete(r, n) {
    return this.request(
      {
        method: "DELETE",
        path: "{user_id}"
      },
      r,
      n
    );
  }
  updateByEmail(r, n, s) {
    return this.request(
      {
        method: "PUT",
        path: "email:{user_email}"
      },
      r,
      n,
      s
    );
  }
  deleteByEmail(r, n) {
    return this.request(
      {
        method: "DELETE",
        path: "email:{user_email}"
      },
      r,
      n
    );
  }
  updateByExternalId(r, n, s) {
    return this.request(
      {
        method: "PUT",
        path: "external_id:{external_id}"
      },
      r,
      n,
      s
    );
  }
  deleteByExternalId(r, n) {
    return this.request(
      {
        method: "DELETE",
        path: "external_id:{external_id}"
      },
      r,
      n
    );
  }
}
typeof XMLHttpRequest != "function" && (W.defaults.adapter = require("axios/lib/adapters/http"));
const it = {
  host: "https://api.magicbell.com",
  timeout: 3e4,
  maxRetries: 3,
  maxRetryDelay: 60,
  telemetry: !0
};
var I, M, v, q, U, B, N, ae, R, ue, j, ce, H, le, G, he, C, de;
class ht {
  constructor(t) {
    x(this, N);
    x(this, R);
    x(this, j);
    x(this, H);
    x(this, G);
    x(this, C);
    x(this, I, void 0);
    x(this, M, void 0);
    x(this, v, void 0);
    x(this, q, new Ie());
    x(this, U, {});
    x(this, B, []);
    i(this, "listen", Ke(this));
    i(this, "imports", new Ve(this));
    i(this, "notificationPreferences", new et(this));
    i(this, "notifications", new tt(this));
    i(this, "pushSubscriptions", new rt(this));
    i(this, "subscriptions", new nt(this));
    i(this, "users", new st(this));
    const r = ["apiKey"].filter((n) => !Q(t, n));
    if (r.length)
      throw new Error(
        `You haven't provided all required options, please provide ${He(...r)} to Client(options)`
      );
    if (!Z(t))
      throw new Error("You have provided invalid options. Please check your client options.");
    O(this, v, Object.assign({}, it, t)), T(this, q).active = Boolean(T(this, v).debug), O(this, M, Pe(t.appInfo)), O(this, I, be(t.appInfo)), O(this, U, t.features || {});
  }
  hasFlag(t) {
    return T(this, U)[t] || !1;
  }
  async request({ method: t, path: r, data: n, params: s }, u) {
    var m, p;
    const o = b(b({}, T(this, v)), u), h = S(this, N, ae).call(this, o, t), g = Math.max(0, o.maxRetries);
    for (let f = 1; f <= g; f++) {
      let a, c;
      const y = Date.now();
      if (T(this, q).debug(`${t} ${r}`), await W({
        method: t,
        url: r,
        baseURL: o.host,
        headers: b(b({}, h), K({
          "X-MAGICBELL-CLIENT-TELEMETRY": S(this, j, ce).call(this)
        })),
        data: n,
        params: s,
        timeout: o.timeout
      }).then((l) => {
        a = l;
      }).catch((l) => {
        const d = ke({ method: t, baseURL: o.host, url: r, data: n, params: s, headers: h });
        T(this, q).error(`${l.message}: ${d}`), c = l, a = l.response;
      }), S(this, R, ue).call(this, a, { startTime: y }), S(this, H, le).call(this, a, f, g)) {
        const l = Number(a.headers["retry-after"]);
        await je(S(this, G, he).call(this, f, l, o.maxRetryDelay));
        continue;
      }
      if (c)
        throw Ae(b({
          name: c.name,
          message: c.message,
          type: c.type,
          status: a.status,
          statusText: a.statusText
        }, (p = (m = a == null ? void 0 : a.data) == null ? void 0 : m.errors) == null ? void 0 : p[0]));
      return a.data;
    }
  }
}
I = new WeakMap(), M = new WeakMap(), v = new WeakMap(), q = new WeakMap(), U = new WeakMap(), B = new WeakMap(), N = new WeakSet(), ae = function(t, r) {
  let n = t.userHmac;
  return !n && t.apiSecret && (t.userExternalId || t.userEmail) && (n = xe(t.apiSecret, t.userExternalId || t.userEmail)), Ne(
    K({
      "User-Agent": typeof document < "u" ? null : T(this, I),
      "Idempotency-Key": t.idempotencyKey || S(this, C, de).call(this, r, t.maxRetries),
      "Accept-Version": "v2",
      "X-MAGICBELL-API-KEY": t.apiKey,
      "X-MAGICBELL-API-SECRET": t.apiSecret,
      "X-MAGICBELL-CLIENT-USER-AGENT": T(this, M),
      "X-MAGICBELL-USER-EMAIL": t.userEmail,
      "X-MAGICBELL-USER-EXTERNAL-ID": t.userExternalId,
      "X-MAGICBELL-USER-HMAC": n
    }),
    !0
  );
}, R = new WeakSet(), ue = function(t, { startTime: r }) {
  if (!T(this, v).telemetry || !(t != null && t.status))
    return;
  const n = K(t.headers);
  T(this, B).push({
    id: n["X-Request-Id"],
    runtime: Number(n["X-Runtime"]),
    duration: Date.now() - r,
    status: t.status
  });
}, j = new WeakSet(), ce = function() {
  const t = T(this, B).pop();
  return t ? JSON.stringify(t) : null;
}, H = new WeakSet(), le = function(t, r, n) {
  return r >= n ? !1 : t ? t.headers["should-retry"] ? t.headers["should-retry"] === "true" : t.status === 409 || t.status === 503 || t.status >= 500 && t.request.method !== "POST" : !0;
}, G = new WeakSet(), he = function(t, r = null, n) {
  let u = Math.min(0.5 * Math.pow(t, 2), n);
  return u *= 0.75 * (1 + Math.random()), u = Math.min(Math.max(0.5, u), n), Number.isInteger(r) && r <= 60 && (u = Math.max(u, r)), u * 1e3;
}, C = new WeakSet(), de = function(t, r) {
  if (!(t !== "POST" || r === 0))
    return `magicbell-retry-${Re()}`;
};
export {
  ht as Client,
  xe as createHmac,
  ht as default
};
//# sourceMappingURL=magicbell.esm.min.js.map
