import { type FromSchema } from 'json-schema-to-ts';
import { Resource } from '../resource';
import * as schemas from '../schemas/users';
import { type RequestOptions } from '../types';
declare type CreateUsersResponse = FromSchema<typeof schemas.CreateUsersResponseSchema>;
declare type CreateUsersPayload = FromSchema<typeof schemas.CreateUsersPayloadSchema>;
declare type UpdateUsersResponse = FromSchema<typeof schemas.UpdateUsersResponseSchema>;
declare type UpdateUsersPayload = FromSchema<typeof schemas.UpdateUsersPayloadSchema>;
declare type UpdateByEmailUsersResponse = FromSchema<typeof schemas.UpdateByEmailUsersResponseSchema>;
declare type UpdateByEmailUsersPayload = FromSchema<typeof schemas.UpdateByEmailUsersPayloadSchema>;
declare type UpdateByExternalIdUsersResponse = FromSchema<typeof schemas.UpdateByExternalIdUsersResponseSchema>;
declare type UpdateByExternalIdUsersPayload = FromSchema<typeof schemas.UpdateByExternalIdUsersPayloadSchema>;
export declare class Users extends Resource {
    path: string;
    entity: string;
    /**
     * Create a user. Please note that you must provide the user's email or the
     * external id so MagicBell can uniquely identify the user.
     *
     * The external id, if provided, must be unique to the user.
     *
     * @param options - override client request options.
     * @returns
     **/
    create(options?: RequestOptions): Promise<CreateUsersResponse>;
    /**
     * Create a user. Please note that you must provide the user's email or the
     * external id so MagicBell can uniquely identify the user.
     *
     * The external id, if provided, must be unique to the user.
     *
     * @param data
     * @param options - override client request options.
     * @returns
     **/
    create(data: CreateUsersPayload, options?: RequestOptions): Promise<CreateUsersResponse>;
    /**
     * Update a user's data. If you identify users by their email addresses, you need
     * to update the MagicBell data, so this user can still access their notifications.
     *
     * @param userId - The user id is the MagicBell user id. Alternatively, provide an
     *   id like `email:theusersemail@example.com` or `external_id:theusersexternalid` as
     *   the user id.
     * @param options - override client request options.
     * @returns
     **/
    update(userId: string, options?: RequestOptions): Promise<UpdateUsersResponse>;
    /**
     * Update a user's data. If you identify users by their email addresses, you need
     * to update the MagicBell data, so this user can still access their notifications.
     *
     * @param userId - The user id is the MagicBell user id. Alternatively, provide an
     *   id like `email:theusersemail@example.com` or `external_id:theusersexternalid` as
     *   the user id.
     * @param data
     * @param options - override client request options.
     * @returns
     **/
    update(userId: string, data: UpdateUsersPayload, options?: RequestOptions): Promise<UpdateUsersResponse>;
    /**
     * Immediately deletes a user.
     *
     * @param userId - The user id is the MagicBell user id. Alternatively, provide an
     *   id like `email:theusersemail@example.com` or `external_id:theusersexternalid` as
     *   the user id.
     * @param options - override client request options.
     **/
    delete(userId: string, options?: RequestOptions): Promise<void>;
    /**
     * Update a user's data. If you identify users by their email addresses, you need
     * to update the MagicBell data, so this user can still access their notifications.
     *
     * @param userEmail
     * @param options - override client request options.
     * @returns
     **/
    updateByEmail(userEmail: string, options?: RequestOptions): Promise<UpdateByEmailUsersResponse>;
    /**
     * Update a user's data. If you identify users by their email addresses, you need
     * to update the MagicBell data, so this user can still access their notifications.
     *
     * @param userEmail
     * @param data
     * @param options - override client request options.
     * @returns
     **/
    updateByEmail(userEmail: string, data: UpdateByEmailUsersPayload, options?: RequestOptions): Promise<UpdateByEmailUsersResponse>;
    /**
     * Immediately deletes a user.
     *
     * @param userEmail
     * @param options - override client request options.
     **/
    deleteByEmail(userEmail: string, options?: RequestOptions): Promise<void>;
    /**
     * Update a user's data. If you identify users by their email addresses, you need
     * to update the MagicBell data, so this user can still access their notifications.
     *
     * @param externalId
     * @param options - override client request options.
     * @returns
     **/
    updateByExternalId(externalId: string, options?: RequestOptions): Promise<UpdateByExternalIdUsersResponse>;
    /**
     * Update a user's data. If you identify users by their email addresses, you need
     * to update the MagicBell data, so this user can still access their notifications.
     *
     * @param externalId
     * @param data
     * @param options - override client request options.
     * @returns
     **/
    updateByExternalId(externalId: string, data: UpdateByExternalIdUsersPayload, options?: RequestOptions): Promise<UpdateByExternalIdUsersResponse>;
    /**
     * Immediately deletes a user.
     *
     * @param externalId
     * @param options - override client request options.
     **/
    deleteByExternalId(externalId: string, options?: RequestOptions): Promise<void>;
}
export {};
